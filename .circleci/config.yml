version: 2.1

orbs:
  win: circleci/windows@2.2.0

defaults: &defaults
  parameters:
    node_version:
      type: string
      default: ''
  working_directory: ~/snyk

commands:
  install_deps:
    description: Install dependencies
    steps:
      - run:
          name: Use snyk-main npmjs user
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
      - run:
          name: Install dependencies
          command: npm install
  build_ts:
    description: Build js files from ts
    steps:
      - run:
          name: Build
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist/
  install_node_npm:
    description: Install correct Node version
    parameters:
      node_version:
        type: string
        default: ''
    steps:
      - run:
          name: Install correct version of Node
          command: nvm install << parameters.node_version >>
      - run:
          name: Use correct version of Node
          command: nvm use << parameters.node_version >>
  install_shellspec:
    description: Install Shellspec
    steps:
      - run: curl -fsSL https://git.io/shellspec | sh -s -- -y
      - run: sudo ln -s ${HOME}/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
      - run: sudo apt-get install jq
  show_node_version:
    description: Log Node and npm version
    steps:
      - run:
          name: Node version
          command: node --version
      - run:
          name: NPM version
          command: npm --version
  generate_help:
    description: Generate CLI help files
    steps:
      - run:
          name: Run CLI help text builder
          command: npm run generate-help
  install_github_cli:
    description: Install GitHub CLI (gh)
    steps:
      - run:
          name: Install GitHub CLI (gh)
          command: |
            mkdir gh-download
            curl -Lo ./gh-download/gh_1.3.1_linux_amd64.tar.gz https://github.com/cli/cli/releases/download/v1.3.1/gh_1.3.1_linux_amd64.tar.gz
            tar -xf ./gh-download/gh_1.3.1_linux_amd64.tar.gz --directory gh-download
            chmod a+x gh-download/gh_1.3.1_linux_amd64/bin/gh
            mkdir -p /home/circleci/bin
            mv gh-download/gh_1.3.1_linux_amd64/bin/gh /home/circleci/bin
            which gh
            gh --version
  configure_git_credentials:
    description: Configure Git Credentials
    steps:
      - run:
          name: Configure Git Credentials
          command: |
            git config --global user.email "$GH_USER_EMAIL"
            git config --global user.name "$GH_USER"
#            echo -e "$GPG_KEY" | gpg --import
#            git config --global commit.gpgsign true
#            git config --global user.signingkey $GPG_ID

jobs:
  canary-release:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    resource_class: small
    steps:
      - checkout
      - add_ssh_keys
      - setup_remote_docker:
          version: 19.03.13
      - configure_git_credentials
      - install_github_cli
      - run:
          name: Install npm@7
          command: |
            sudo npm install -g npm@7
      - show_node_version
      - run:
          name: Setup Lerna
          command: sudo npm install -g lerna
      - run:
          name: npm install
          command: |
            npm install
            ls -la
            ls -la packages/*protect

      - run:
          name: Update package versions
          command: ./release-scripts/update-versions.sh

      - run:
          name: Make git ignore changes relating to version updates
          command: |
            git update-index --skip-worktree -- ./lerna.json
            git update-index --skip-worktree -- ./package.json
            git update-index --skip-worktree -- ./packages/mod-cli-spike-protect/package.json
            git update-index --skip-worktree -- ./packages/mod-cli-spike-some-top-level-command/package.json
            git update-index --skip-worktree -- ./packages/mod-cli-spike-woof/package.json

      - run:
          name: Canary Lerna Publish
          command: |
            # lerna publish preminor --force-publish --canary --yes --no-git-reset --skip-git
            # Orig:
            lerna publish preminor --force-publish --canary --yes

      - run:
          name: See what lerna did
          command: |
            cat ./lerna.json ./package.json ./packages/mod-cli-spike-protect/package.json ./packages/mod-cli-spike-some-top-level-command/package.json ./packages/mod-cli-spike-woof/package.json | grep version
            cat ./package.json | grep "hammertime/mod-cli-spike"

      - run:
          name: Experiment with tags
          command: |
            git --no-pager log --max-count=3
            echo "tags:"
            git tag
            git rev-list --tags --max-count=1
            git_hash_latest=$(git rev-list --tags --max-count=1) # this gets the commit hash of the latest tag (or empty of no tag)
            echo "git_hash_latest: ${git_hash_latest}"
            latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "latest_tag: ${latest_tag}"
            echo "CIRCLE_SHA1: ${CIRCLE_SHA1}"
            echo "CIRCLE_TAG: ${CIRCLE_TAG}"
            echo "gh indicates latest release:"
            gh release list --limit 1

      - run:
          name: Create Binaries
          command: |
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases

      - store_artifacts:
          path: ./binary-releases

  legit-release:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    resource_class: small
    steps:
      - checkout
      - add_ssh_keys
      - setup_remote_docker:
          version: 19.03.13
      - install_github_cli
      - run:
          name: Install npm@7
          command: |
            sudo npm install -g npm@7
      - show_node_version
      - run:
          name: Setup Lerna
          command: sudo npm install -g lerna
      
      - configure_git_credentials

      - run:
          name: npm install
          command: |
            npm install
            ls -la
            ls -la packages/*protect

      - run:
          name: Update package versions
          command: ./release-scripts/update-versions.sh

      - run:
          name: Make git ignore changes relating to version updates
          command: |
            git update-index --skip-worktree -- ./lerna.json
            git update-index --skip-worktree -- ./package.json
            git update-index --skip-worktree -- ./packages/mod-cli-spike-protect/package.json
            git update-index --skip-worktree -- ./packages/mod-cli-spike-some-top-level-command/package.json
            git update-index --skip-worktree -- ./packages/mod-cli-spike-woof/package.json

      - run:
          name: Lerna Publish
          command: |
            lerna publish minor --yes --no-push --no-git-tag-version
            # lerna publish minor --yes --message "chore: release [skip ci]" --create-release=github --conventional-commits --no-changelog
            # lerna publish minor --yes --message "chore: release [skip ci]"

      - run:
          name: Get new tag
          command: |
            export new_tag="v1.2.3"  # TODO: make real
            echo "new_tag: ${new_tag}"
            npm view @hammertime/mod-cli-spike --json
            npm view @hammertime/mod-cli-spike --json | jq .version -r
            latest_npm_release_version=$(npm view @hammertime/mod-cli-spike --json | jq .version -r)
            echo "latest_npm_release_version: ${latest_npm_release_version}"
            echo "lerna.json":
            cat lerna.json
            latest_version_per_lerna_json=$(cat lerna.json | jq .version -r)
            echo "latest_version_per_lerna_json: ${latest_version_per_lerna_json}"

      - run:
          name: Create a GitHub release
          command: |
            latest_version=$(cat lerna.json | jq .version -r)
            new_tag="v${latest_version}"
            gh release create ${new_tag} --title "${new_tag}" -n "Release notes not implemented yet"

      - run:
          name: Create Binaries
          command: |
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases

      - run:
          name: Add Assets to GitHub Release
          command: |
            git --no-pager log --max-count=3
            echo "tags:"
            git tag
            git rev-list --tags --max-count=1
            git_hash_latest=$(git rev-list --tags --max-count=1) # this gets the commit hash of the latest tag (or empty of no tag)
            echo "git_hash_latest: ${git_hash_latest}"
            latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "latest_tag: ${latest_tag}"
            echo "CIRCLE_SHA1: ${CIRCLE_SHA1}"
            echo "CIRCLE_TAG: ${CIRCLE_TAG}"
            echo "gh indicates latest release:"
            gh release list --limit 1
            gh_latest_release_tag=$(gh release list --limit 1)
            echo "gh_latest_release_tag: ${gh_latest_release_tag}"
            gh release upload $gh_latest_release_tag \
              binary-releases/mod-cli-spike-alpine \
              binary-releases/mod-cli-spike-linux \
              binary-releases/mod-cli-spike-macos \
              binary-releases/mod-cli-spike-win.exe \
              binary-releases/mod-cli-spike-linux.sha256 \
              binary-releases/mod-cli-spike-macos.sha256 \
              binary-releases/mod-cli-spike-alpine.sha256

workflows:
  version: 2
  test_and_release:
    jobs:
      - canary-release:
          name: Canary Release
          node_version: '14'
          filters:
            branches:
              ignore:
                - master
      - legit-release:
          name: Legit Release
          node_version: '14'
          filters:
            branches:
              only:
                - master
